# This is a setup template for CMS Cloud Distributed Load Tests on AWS (DLTA)
# Follow resources are created
# 1) S3 bucket for storing DLTA installation files
# 2) Codebuild project that downloads the installation files from CMS Cloud Artifactory to the S3 bucket
# 3) Custom lambda function that triggers the codebuild project
# 4) Custom resource that trigger the lambda function on create/update
# 5) IAM roles and policies

Description: "CMS Cloud - Distributed Load Testing on AWS (DLTA) - Setup S3 bucket with DLTA installation files."

Parameters:
  EnvName:
    Type: String
    Default: dev
    Description: Environment Name
    AllowedValues:
      - dev
      - test
      - impl
      - management
  CodeVersion:
    Type: String
    Default: 1.3
    Description: Code Version
  VpcId:
    Type: String
    Default: vpc-0565a143484757b07
    Description: VPC ID
  SubnetIdA:
    Type: String
    Default: subnet-0cbe779d27bf5766d # Private subnet A
    Description: Subnet ID for Availability Zone A    
  SubnetIdB:
    Type: String
    Default: subnet-07cac89314877fcf0 # Private subnet B  
    Description: Subnet ID for Availability Zone B
  SubnetIdC:
    Type: String
    Default: subnet-0eee55a2271888248 # Private subnet C
    Description: Subnet ID for Availability Zone C       
  # This is a dummy parameter for invoking the lambda function for each update event. It's useful for running the job in CI/CD pipeline    
  Build:
    Type: String
    Default: 1
    Description: Build number
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "DLT Setup Parameters"
        Parameters:
          - EnvName
          - CodeVersion
          - Build
      - Label:
          default: "DLT VPC and Subnets Parameters"
        Parameters:          
          - VpcId
          - SubnetIdA
          - SubnetIdB
          - SubnetIdC          
Mappings:
  cmscloud:
    artifactory:
      url: 'artifactory.cloud.cms.gov'
      path: 'artifactory/tooling-dlta-prod-local'
Resources:
## Roles and Permissions
  SetupCWLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-cloudwatch-policy
      Roles:
        - !Ref SetupCodeBuildRole 
        - !Ref SetupLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/,
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/*

  SetupLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-lambda-policy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - codebuild:StartBuild
                - codebuild:BatchGetBuilds
              Resource:
                - !Sub ${SetupCodeBuild.Arn}
                  
  SetupCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codebuild.amazonaws.com        
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-codebuild-policy
          PolicyDocument:
            Statement:

              - Effect: Allow
                Action:
                  - ec2:*
                Resource: "*"           
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:GetObjectVersion
                  - s3:ListBucketVersions
                  - s3:PutObject
                Resource:
                    - !Sub ${SetupBucket.Arn}
                    - !Sub ${SetupBucket.Arn}/*
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: ecr:GetAuthorizationToken does not support resource level permission.
  SetupBucket:
    # UpdateReplacePolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Suspended
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-bucket
        - Key: Environment
          Value: !Sub ${EnvName}             
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W51
            reason: Since the bucket does not allow the public access, it does not require to have bucket policy.
  SetupCodeBuildSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VpcId
      GroupName: !Sub ${AWS::StackName}-codebuild-sg
      GroupDescription: !Sub ${AWS::StackName}-codebuild-sg
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound connectivity - This is required for codebuild
  SetupCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: Pull installation files from artifactory.cloud.cms.gov and copy to the S3 bucket
      TimeoutInMinutes: 5
      ServiceRole: !GetAtt SetupCodeBuildRole.Arn
      EncryptionKey: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: ARTIFACTORY_URL
            Value: !FindInMap [cmscloud, artifactory, url]
          - Name: ARTIFACTORY_PATH
            Value: !FindInMap [cmscloud, artifactory, path]
          - Name: VERSION
            Value: !Sub ${CodeVersion}
          - Name: BUCKET
            Value: !Sub ${SetupBucket}
      VpcConfig:
        VpcId: !Ref VpcId       
        Subnets: 
        - !Ref SubnetIdA
        - !Ref SubnetIdB
        - !Ref SubnetIdC
        SecurityGroupIds: 
        - !Ref SetupCodeBuildSecurityGroup   
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub |
            version: 0.2
            phases:
                pre_build:
                  commands:
                    - rm -rf *
                    - aws --version
                    - echo "Source https://$ARTIFACTORY_URL/$ARTIFACTORY_PATH/$VERSION/"
                    - echo "Target s3://$BUCKET/$VERSION/"
                build:
                  commands:
                    - wget -rnH --cut-dirs=3 --reject "index.html*" https://$ARTIFACTORY_URL/$ARTIFACTORY_PATH/$VERSION/
                    - unzip console.zip && rm -f console.zip
                post_build:
                  commands:
                    - aws s3 cp ./ s3://$BUCKET/$VERSION/ --recursive --acl bucket-owner-full-control
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-codebuild
        - Key: Environment
          Value: !Sub ${EnvName} 

  TriggerSetupCodeBuild:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt SetupLambdaRole.Arn
      Code:
        ZipFile: !Sub |
            const AWS = require("aws-sdk");
            const response = require('cfn-response');
            exports.handler = (event, context) => {
                if (event.RequestType == "Delete") {
                    response.send(event, context, "SUCCESS");
                    return;
                }
                const codebuild = new AWS.CodeBuild();
                let responseStatus = "FAILED";
                let responseData = {};
                const build = {
                   projectName: "${SetupCodeBuild}"
                };
                codebuild.startBuild(build,function(err, data){
                    if (err) {
                        responseData = {Error: "Invoke call failed"};
                        console.log(err, err.stack);
                    }
                    else {
                        responseStatus = "SUCCESS";
                        console.log(data);
                    }
                    response.send(event, context, responseStatus, responseData);
                }); 
                
            };
      Runtime: nodejs12.x
      Timeout: 120
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lambda
        - Key: Environment
          Value: !Sub ${EnvName} 
  CopySetupFiles:
    DependsOn: [SetupCodeBuild, SetupLambdaRole, SetupCWLogsPolicy]
    Type: Custom::CopyInstallFiles
    Properties:
      ServiceToken: !GetAtt TriggerSetupCodeBuild.Arn
      Build: !Ref Build
          
Outputs:
  DLTAInstallBucket:
    Description: DLTA S3 bucket that stores installation files
    Value: !Ref SetupBucket
    Export:
      Name: DLTAInstallBucket
  DLTAInstallBucketArn:
    Description: ARN of DLTA Install Bucket
    Value: !GetAtt SetupBucket.Arn
    Export:
      Name: DLTAInstallBucketArn   
  DLTAVpdId:
    Description: DLTA VPC ID
    Value: !Ref VpcId
    Export:
      Name: DLTAVpcId
  DLTSubnetIdA:
    Description: DLTA Subnet ID for Availability Zone A
    Value: !Ref SubnetIdA
    Export:
      Name: DLTASubnetIdA
  DLTSubnetIdB:
    Description: DLTA Subnet ID for Availability Zone B
    Value: !Ref SubnetIdB
    Export:
      Name: DLTASubnetIdB
  DLTSubnetIdC:
    Description: DLTA Subnet ID for Availability Zone C
    Value: !Ref SubnetIdC
    Export:
      Name: DLTASubnetIdC      